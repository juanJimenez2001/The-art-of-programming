package aop.solution;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

//import aop.runner.TestObject;

public class Program {

	/*public static int findLowPoint (TestObject altitudes) {
        int aux = findLowPoint(altitudes, 0, altitudes.size()-1);
        return aux;
	}

	public static int findLowPoint(TestObject altitudes, int i, int j) {
		int x=(i+j)/2;
        if (x==altitudes.size()-1 || altitudes.get(x+1)<=altitudes.get(x)) {
        	if(x==0 || altitudes.get(x-1)<=altitudes.get(x)) {
        		return x;
        	}
        	else {
        		return findLowPoint(altitudes, i, x-1);
        	}       	
        }       
        return findLowPoint(altitudes, x+1, j);
	}*/

	/*public static int findLowPoint (List<Integer> altitudes) {
		int aux = findLowPoint(altitudes, 0, altitudes.size()-1);
		return aux;
	}*/

	public static int findLowPoint(List<Integer> altitudes, int n) { 
		// First or last element is peak element
		if (n == 1) 
			return 0;
		if (altitudes.get(0) >= altitudes.get(1))
			return 0;
		if (altitudes.get(n-1) >= altitudes.get(n-2))
			return n - 1;

		// Check for every other element
		for(int i = 1; i < n - 1; i++) 
		{

			// Check if the neighbors are smaller
			if (altitudes.get(i)>= altitudes.get(i-1)&& 
					altitudes.get(i) >= altitudes.get(i+1))
				return i;
		}
		return 0;
	}

	public static void main(String [] argcs) {
		Scanner sc=new Scanner(System.in);
		List<Integer> lista= new ArrayList<Integer>();
		int x=sc.nextInt();
		while(x!=0){
			lista.add(x);
			x=sc.nextInt();
		}
		System.out.println(findLowPoint(lista));
		sc.close();
	}
}
