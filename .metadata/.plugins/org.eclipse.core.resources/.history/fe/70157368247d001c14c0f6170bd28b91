package aop.solution;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

//import aop.runner.TestObject;

public class Program {

	/*public static int findLowPoint (TestObject altitudes) {
        int aux = findLowPoint(altitudes, 0, altitudes.size()-1);
        return aux;
	}

	public static int findLowPoint(TestObject altitudes, int i, int j) {
		int x=(i+j)/2;
        if (x==altitudes.size()-1 || altitudes.get(x+1)<=altitudes.get(x)) {
        	if(x==0 || altitudes.get(x-1)<=altitudes.get(x)) {
        		return x;
        	}
        	else {
        		return findLowPoint(altitudes, i, x-1);
        	}       	
        }       
        return findLowPoint(altitudes, x+1, j);
	}*/

	/*public static int findLowPoint (List<Integer> altitudes) {
		int aux = findLowPoint(altitudes, 0, altitudes.size()-1);
		return aux;
	}*/

	static int findLowPoint(List<Integer> altitudes, int n){
		return findLowPoint(altitudes, 0, n-1, n);
	}

	static int findLowPoint(List<Integer> altitudes, int low, int high, int n) {
		// Find index of middle element
		// (low + high)/2
		int mid=low+(high-low)/2;

		// Compare middle element with its
		// neighbours (if neighbours exist)
		if (mid == 0 || mid==n-1)
			if(altitudes.get(mid-1)>=altitudes.get(mid) && altitudes.get(mid+1)>=altitudes.get(mid))
return mid;
else
	return -1;

// If middle element is not peak
// and its left neighbor is
// greater than it, then left half
// must have a peak element
else if (mid>0 && altitudes.get(mid-1)>altitudes.get(mid))
	return findLowPoint(altitudes, low, (mid-1), n);
// If middle element is not peak
// and its right neighbor
// is greater than it, then right
// half must have a peak
// element
else
	return findLowPoint(altitudes, (mid+1), high, n);
	}

	public static void main(String [] argcs) {
		Scanner sc=new Scanner(System.in);
		List<Integer> lista= new ArrayList<Integer>();
		int x=sc.nextInt();
		while(x!=0){
			lista.add(x);
			x=sc.nextInt();
		}
		System.out.println(findLowPoint(lista, lista.size()));
		sc.close();
	}
}
