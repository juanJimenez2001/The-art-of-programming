package aop.solution;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

//import aop.runner.TestObject;

public class Program {

	public static int findLowPoint (TestObject altitudes) {
		return findLowPoint(altitudes, 0, altitudes.size-1, altitudes.size);
	}

	public static int findLowPoint(TestObject altitudes, int low, int high, int n) {
		int mid=low+(high-low)/2;

	        if ((mid == 0 || altitudes.get(mid-1)>=altitudes.get(mid)) && (mid==n-1 || altitudes.get(mid+1)>=altitudes.get(mid)))
	            return mid;
	  
	        else if (mid>0 && altitudes.get(mid-1)>altitudes.get(mid))
	            return findLowPoint(altitudes, low, (mid-1), n);

	        else
	            return findLowPoint(altitudes, (mid+1), high, n);
	}

	/*public static int findLowPoint (List<Integer> altitudes) {
		int aux = findLowPoint(altitudes, 0, altitudes.size()-1);
		return aux;
	}*/

	/*static int findLowPoint(List<Integer> altitudes, int n){
        return findLowPoint(altitudes, 0, n-1, n);
    }
	
	static int findLowPoint(List<Integer> altitudes, int low, int high, int n) {
	        int mid=low+(high-low)/2;

	        if ((mid == 0 || altitudes.get(mid-1)>=altitudes.get(mid)) && (mid==n-1 || altitudes.get(mid+1)>=altitudes.get(mid)))
	            return mid;
	  
	        else if (mid>0 && altitudes.get(mid-1)>altitudes.get(mid))
	            return findLowPoint(altitudes, low, (mid-1), n);

	        else
	            return findLowPoint(altitudes, (mid+1), high, n);
	    }

	public static void main(String [] argcs) {
		Scanner sc=new Scanner(System.in);
		List<Integer> lista= new ArrayList<Integer>();
		int x=sc.nextInt();
		while(x!=0){
			lista.add(x);
			x=sc.nextInt();
		}
		System.out.println(findLowPoint(lista, lista.size()));
		sc.close();
	}*/
}
